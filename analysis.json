{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "Creates a mixin with the specified functions applied to the superclass\n\n```js\nimport { mixin, Money } from '@neovici/cosmoz-utils';\nimport { isEmpty } from '@neovici/cosmoz-utils/template';\nimport { isoDate } from '@neovici/cosmoz-utils/date';\n\nclass DemoMoneyHelper extends mixin({isEmpty, isoDate, ...Money}, PolymerElement) {\n```",
      "summary": "",
      "path": "index.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 7
        },
        "end": {
          "line": 26,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "mixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ],
  "functions": [
    {
      "name": "anyTrue",
      "description": "Check if any of the arguments are true.",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 6,
          "column": 23
        },
        "end": {
          "line": 9,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [],
      "return": {
        "type": "Boolean",
        "desc": "Whether any of the function arguments are true or not."
      }
    },
    {
      "name": "concat",
      "description": "Concatenate all arguments to a string.",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 15,
          "column": 22
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [],
      "return": {
        "type": "string",
        "desc": "Concatenated arguments."
      }
    },
    {
      "name": "ifElse",
      "description": "If iftrue argument is true, return result argument, otherwise return elseresult argument.",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 26,
          "column": 22
        },
        "end": {
          "line": 28,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "boolean",
          "desc": "Codition for result",
          "name": "iftrue"
        },
        {
          "type": "*",
          "desc": "Result when iftrue is true.",
          "name": "result"
        },
        {
          "type": "*",
          "desc": "Result when iftrue is false.",
          "name": "elseresult"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "result or elseresult depending on iftrue evaluation."
      }
    },
    {
      "name": "inArray",
      "description": "Check if item argument exists in array argument.",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 36,
          "column": 23
        },
        "end": {
          "line": 38,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "*",
          "desc": "Item to search for in the array.",
          "name": "item"
        },
        {
          "type": "array",
          "desc": "Array to search.",
          "name": "array"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "Whether the item was found in array or not."
      }
    },
    {
      "name": "isEqual",
      "description": "Check equality of the arguments.",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 46,
          "column": 23
        },
        "end": {
          "line": 48,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "*",
          "desc": "First argument to compare.",
          "name": "arg1"
        },
        {
          "type": "*",
          "desc": "Second argument to compare",
          "name": "arg2"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "Whether the first and second arguments are equal or not."
      }
    },
    {
      "name": "isEmpty",
      "description": "Check if argument is undefined, null, empty Array list,\nempty String or 0 number (like length).",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 56,
          "column": 23
        },
        "end": {
          "line": 71,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "object",
          "desc": "Argument to evaluate.",
          "name": "obj"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "Whether the argument is empty or not."
      }
    },
    {
      "name": "toFixed",
      "description": "Formats a number using fixed-point notation.",
      "summary": "",
      "sourceRange": {
        "file": "lib/template.js",
        "start": {
          "line": 79,
          "column": 23
        },
        "end": {
          "line": 84,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "number",
          "desc": "Number with decimals to be formatted.",
          "name": "number"
        },
        {
          "type": "number",
          "desc": "Number of decimals to use.",
          "name": "fixval"
        }
      ],
      "return": {
        "type": "String",
        "desc": "The number converted to string keep only fixval number of decimals, if number empty, returns empty string"
      }
    },
    {
      "name": "isoDate",
      "description": "Format a date as an ISO-date - YYYY-MM-DD.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 7,
          "column": 23
        },
        "end": {
          "line": 10,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to be ISO formatted.",
          "name": "date"
        }
      ],
      "return": {
        "type": "string",
        "desc": "ISO formatted date."
      }
    },
    {
      "name": "isoDT",
      "description": "Format a date with time as an ISO date with time - YYYY-MM-DD HH:mm:ss.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 17,
          "column": 21
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to be ISO formatted.",
          "name": "date"
        }
      ],
      "return": {
        "type": "string",
        "desc": "ISO formatted date."
      }
    },
    {
      "name": "pastDate",
      "description": "Check if date is in the past.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 27,
          "column": 24
        },
        "end": {
          "line": 31,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to check.",
          "name": "date"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "Whether the date is in the past or not."
      }
    },
    {
      "name": "timeago",
      "description": "Get human readable string describing date's difference from now in the current locale language.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 38,
          "column": 23
        },
        "end": {
          "line": 41,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to check.",
          "name": "date"
        }
      ],
      "return": {
        "type": "string",
        "desc": "Date representation string in the current locale language."
      }
    },
    {
      "name": "renderDate",
      "description": "Alias for isoDate(date), format a date as an ISO-date - YYYY-MM-DD.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 48,
          "column": 26
        },
        "end": {
          "line": 50,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to be formatted.",
          "name": "date"
        }
      ],
      "return": {
        "type": "string",
        "desc": "ISO formatted date."
      }
    },
    {
      "name": "renderDatetime",
      "description": "Alias for isoDT(date). Format a date with time as an ISO date with time - YYYY-MM-DD HH:mm:ss.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 57,
          "column": 30
        },
        "end": {
          "line": 59,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to be ISO formatted.",
          "name": "date"
        }
      ],
      "return": {
        "type": "string",
        "desc": "ISO formatted date."
      }
    },
    {
      "name": "ensureDate",
      "description": "Validate a Date object or date string.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 66,
          "column": 26
        },
        "end": {
          "line": 83,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to check.",
          "name": "date"
        }
      ],
      "return": {
        "type": "date",
        "desc": "Validated date or undefined on failure."
      }
    },
    {
      "name": "dayDiff",
      "description": "Get difference in days between two date strings.",
      "summary": "",
      "sourceRange": {
        "file": "lib/date.js",
        "start": {
          "line": 91,
          "column": 23
        },
        "end": {
          "line": 98,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "date/string",
          "desc": "Date to count days from.",
          "name": "date1"
        },
        {
          "type": "date/string",
          "desc": "Date to count days to.",
          "name": "date2"
        }
      ],
      "return": {
        "type": "string",
        "desc": "Date difference in days."
      }
    },
    {
      "name": "isAmount",
      "description": "Determine if a constant or a variable is an amount.",
      "summary": "",
      "sourceRange": {
        "file": "lib/money.js",
        "start": {
          "line": 24,
          "column": 24
        },
        "end": {
          "line": 31,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "object",
          "desc": "Potential amount.",
          "name": "potentialAmount"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "Whether the potential amount is a valid amount object with amount and currency."
      }
    },
    {
      "name": "renderAmount",
      "description": "Render an amount with decimal separator and currency symbol.",
      "summary": "",
      "sourceRange": {
        "file": "lib/money.js",
        "start": {
          "line": 38,
          "column": 28
        },
        "end": {
          "line": 47,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "object",
          "desc": "Money with amount property and optionally currency property.",
          "name": "money"
        }
      ],
      "return": {
        "type": "string",
        "desc": "Formatted amount."
      }
    },
    {
      "name": "renderNumberAmount",
      "description": "Render an amount with decimal separator but without currency symbol.",
      "summary": "",
      "sourceRange": {
        "file": "lib/money.js",
        "start": {
          "line": 61,
          "column": 34
        },
        "end": {
          "line": 63,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "object",
          "desc": "Money with amount property and optionally currency property.",
          "name": "money"
        }
      ],
      "return": {
        "type": "string",
        "desc": "Formatted number."
      }
    },
    {
      "name": "round",
      "description": "Round a number to a given precision.",
      "summary": "",
      "sourceRange": {
        "file": "lib/money.js",
        "start": {
          "line": 71,
          "column": 21
        },
        "end": {
          "line": 74,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "string",
          "desc": "Number with decimals to round.",
          "name": "number"
        },
        {
          "type": "number",
          "desc": "Number of decimals to round amount to.",
          "name": "precision"
        }
      ],
      "return": {
        "type": "number",
        "desc": "Rounded number."
      }
    },
    {
      "name": "amountEquals",
      "description": "Compare amounts.",
      "summary": "",
      "sourceRange": {
        "file": "lib/money.js",
        "start": {
          "line": 83,
          "column": 28
        },
        "end": {
          "line": 87,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "object",
          "desc": "Amount 1.",
          "name": "amount1"
        },
        {
          "type": "object",
          "desc": "Amount 2.",
          "name": "amount2"
        },
        {
          "type": "number",
          "desc": "Decimal precision, defaults to 2 decimals.",
          "name": "precision"
        }
      ],
      "return": {
        "type": "boolean",
        "desc": "Whether the amounts are equal regarding amount to the specified precision and the currency."
      }
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "index.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 22
        },
        "end": {
          "line": 23,
          "column": 49
        }
      },
      "privacy": "public",
      "superclass": "superclass",
      "name": "MixedElement"
    }
  ]
}
